/* cfunc declarations.... TODO put these in an include */
print:       foreign (format: ^byte, ...) -> void;
alloc:       foreign (bytes: int) -> ^byte;
delete:      foreign (ptr: ^byte) -> void;
quit:        foreign (code: int) -> void;
read_int:    foreign (ptr: ^int) -> int;
read_float:  foreign (ptr: ^float) -> int;
read_string: foreign (ptr: ^byte, size: int) -> ^byte;

struct NameContainer {
	first: ^byte;
	last:  ^byte;
};

struct FunctionDescriptor {
	name:  ^byte;
	ptr:   (arg: int) -> int;
};

factorial: (n: int) -> int {
	if (n <= 1)
		return 1;
	return n * factorial(n - 1);	
};

fibonacci: (n: int) -> int {
	if (n <= 2)
		return 1;
	return fibonacci(n - 1) + fibonacci(n - 2);
}

square: (n: int) -> int {
	return n * n;
}

/* returns 1 if n is prime, 0 if not */
is_prime: (n: int) -> int {
	
	i: int;

	if (n % 2 == 0) {
		return 0;
	}
		
	for (i = 3; i*i <= n; i += 2) {
		if (n % i == 0) {
			return 0;
		}
	}
	
	return 1;
}

/* calls read_int until proper input is given */
read_proper_int: (target: ^int) -> void {
	while (!read_int(target)) {
		print("invalid integer input, try again.\n");
	}
}

safe_alloc: (bytes: int) -> ^byte {
	chunk: ^byte;

	chunk = alloc(bytes);
	if (!chunk) {
		print("!!! out of memory, abort !!!\n");
		quit(1);
	}

	return chunk;
}

strlen: (str: ^byte) -> int {
	
	len: int;

	len = 0;
	
	while ($str) {
		str += 1;
		len += 1;
	}

	return len;

}

strneq: (a: ^byte, b: ^byte, length: int) -> int {
	
	while (length > 0) {
		if ($a != $b) {
			return 0;
		}
		if (!$a) {
			return 1;	
		}
		a += 1;
		b += 1;
		length -= 1;
	}

	return 1;

}

streq: (a: ^byte, b: ^byte) -> int {

	while ($a == $b) {
		if (!$a) {
			return 1;
		}
		a += 1;
		b += 1;
	}

	return 0;
		
}

strfind: (source: ^byte, target: ^byte) -> ^byte {

	index: int;
	len_source: int;
	len_target: int;

	len_source = strlen(source);
	len_target = strlen(target);

	if (len_target > len_source) {
		return 0;
	}

	for (index = 0; index < len_source; index += 1) {
		if (strneq(@source[index], target, len_target)) {
			return @source[index];
		}
	}

	return 0;
}

/* ---------- beginning of driver functions ---------- */

do_primes: () -> void {

	array: ^int;
	i: int;
	primes_found: int;
	num_primes: int;

	print("\n\n\n--- PRIMES STAGE ---\n");
	
	print("how many primes do you want to find?\n");
	read_proper_int(@num_primes);
	primes_found = 0;

	print("finding %d primes...\n", num_primes);
	
	/* allocate space for the array and ensure it was allocated properly */	
	array = #^int safe_alloc(num_primes * sizeof int);	
	
	/* stick the primes in an array */
	i = 2;
	while (primes_found < num_primes) {
		if (is_prime(i)) {
			array[primes_found] = i;
			primes_found += 1;
		}
		i += 1;
	}	

	/* print the primes */
	for (i = 0; i < num_primes; i += 1) {
		print("prime #%d = %d\n", i + 1, array[i]);
	}

	/* cleanup */
	delete(#^byte array);
	
}

do_pointers: () -> void {

	dangling: [2]^byte;
	active:   [2]^byte;
	size:     int;
	i:		  int;

	print("\n\n\n--- POINTER STAGE ---\n");

	size = 20;
	
	/* create dangling pointers */
	for (i = 0; i < 2; i += 1) {
		dangling[i] = safe_alloc(size);
		delete(dangling[i]);
	}

	/* create active pointers */
	for (i = 0; i < 2; i += 1) {
		active[i] = safe_alloc(size);
	}
	
	print("dangling: 0x%xi, 0x%xi, %d\n", dangling[0], dangling[1], dangling[0] == dangling[1]);
	print("active:   0x%xi, 0x%xi, %d\n", active[0], active[1], active[0] == active[1]);

	/* cleanup active pointers */
	for (i = 0; i < 2; i += 1) {
		delete(active[i]);
	}

}

do_string: () -> void {
	
	name:    NameContainer;	
	buf:     ^byte;	
	max:     int;
	err_msg: ^byte;

	print("\n\n\n--- STRING STAGE ---\n");

	err_msg = "invalid name input, try again.\n";
	max = 500;
	
	buf = safe_alloc(max);
	print("what is your name? (first and last)\n");	
	while (1) {
		read_string(buf, max);
		name.first = @buf[0]; /* could also just set equal to buf... */
		name.last = strfind(name.first, " ");
		if (name.last) {
			$name.last = 0;
			name.last += 1;
			if (strfind(name.last, " ")) {
				print(err_msg);
				continue;
			}
			break;
		}
		print(err_msg);
	}
	print("first name: %s\nlast name: %s\n", name.first, name.last);

	/* note that the buffer that should be freed is still pointed to by buf */
	delete(buf);

}

do_sorting: () -> void {
	
	i:     int;
	j:     int;
	size:  int;
	start: int;
	temp:  int;
	array: ^int;

	print("\n\n\n--- SORTING STAGE ---\n");
	print("size of array? ");
	read_proper_int(@size);
	print("now enter %d integers and they will be sorted.\n", size);

	array = #^int safe_alloc(size * sizeof int);
	
	/* populate the array with input */
	for (i = 0; i < size; i += 1) {
		print("integer #%d: ", i + 1);
		read_proper_int(@array[i]);
	}

	/* selection sort */
	for (i = size - 1; i > 0; i -= 1) {
		start = 0;
		for (j = 1; j <= i; j += 1) {
			if (array[j] > array[start]) {
				start = j;
			}
		}
		temp = array[i];
		array[i] = array[start];
		array[start] = temp;
	}
	
	/* print sorted array */
	print("\nsorted array:\n");
	for (i = 0; i < size; i += 1) {
		print("%d", array[i]);
		if (i != size - 1) {
			print(", ");
		}
	}
	print("\n");

	delete(#^byte array);
		
}

do_function_pointer: () -> void {

	desc:     [3]FunctionDescriptor;
	pick:     ^FunctionDescriptor;
	index:    int;
	argument: int;
	i:		  int;

	print("\n\n\n--- FUNCTION POINTER STAGE ---\n");

	desc[0].ptr = factorial;
	desc[0].name = "factorial";

	desc[1].ptr = fibonacci;
	desc[1].name = "fibonacci";

	desc[2].ptr = square;
	desc[2].name = "square";
	
	/* present user with choices... */
	print("which function would you like to execute?\n");
	for (i = 0; i < 3; i += 1) {
		print("\t%d. %s\n", i + 1, desc[i].name);
	}
	
	/* get the index to use */
	while (1) {
		read_proper_int(@index);
		if (index >= 1 && index <= 3) {
			break;
		}
		print("that isn't a valid function index, try again.\n");
	}
	pick = @desc[index - 1];
	
	/* execute via function pointer */
	print("argument to that function? ");
	read_proper_int(@argument);
	print("%s(%d) = %d\n", pick.name, argument, pick.ptr(argument));
	
}

main: () -> void {

	do_string();
	do_primes();
	do_pointers();
	do_sorting();
	do_function_pointer();
	
	print("\n\n");

}

