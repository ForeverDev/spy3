/* cfunc declarations.... TODO put these in an include */
print:   foreign (format: ^byte, ...) -> void;
alloc:   foreign (bytes: int) -> ^byte;
delete:  foreign (ptr: ^byte) -> void;
quit:    foreign (code: int) -> void;

/* returns 1 if n is prime, 0 if not */
is_prime: (n: int) -> int {
	
	i: int;

	if (n % 2 == 0)
		return 0;
		
	for (i = 3; i*i <= n; i += 2)
		if (n % i == 0)
			return 0;
	
	return 1;
}

main: () -> void {
	
	array: ^int;
	i: int;
	num_primes: int;
	primes_found: int;
	
	num_primes = 500;
	primes_found = 0;
	
	/* allocate space for the array and ensure it was allocated properly */	
	array = #^int alloc(num_primes * sizeof int);	
	if (!array) {
		print("couldn't allocate space for an array containing %d integers\n", num_primes);
		quit(1);
	}
	
	/* stick the primes in an array */
	i = 2;
	while (primes_found < num_primes) {
		if (is_prime(i)) {
			array[primes_found] = i;
			primes_found += 1;
		}
		i += 1;
	}	

	/* print the primes */
	for (i = 0; i < num_primes; i += 1) 
		print("prime #%d = %d\n", i + 1, array[i]);

	/* cleanup */
	delete(#^byte array);

}

